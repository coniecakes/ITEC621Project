---
title: "ITEC 621 Project"
author: 
  - name: "Ledia Dobi"
    affiliation: "American University"
    email: "ld5469a@american.edu"
  - name: "Conie O'Malley"
    affiliation: "American University"
    email: "co1984a@american.edu"
date: "`r Sys.Date()`"
format: 
  html:
    theme: cosmo # Use a Bootswatch theme for consistent styling
    highlight-style: github # Syntax highlighting style
    toc: true
    toc-depth: 4
    number-sections: true # Number the heading sections
    embed-resources: true
    fig-width: 6 # Default figure width in inches
    fig-height: 4 # Default figure height in inches
    df-print: paged
#    css: styles.css # Custom styling
#    include-after-body: footer.html # Custom footer
---

```{r libraries}
# library chunk
required_packages <- c("dplyr", "readr", "tidyverse", "lmtest", "lubridate", "glmnet", "pls", "readxl")

# Function to check if a package is installed
install_and_load <- function(package) {
  if (!require(package, character.only = TRUE)) {
    utils::install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}

for (pkg in required_packages) {
  install_and_load(pkg)
}
```

```{r data import}
# import data sets
median_sale_price <- readr::read_csv("data/median_home_price.csv")
new_construction_sales <- readr::read_csv("data/Metro_new_con_sales_count_raw_uc_sfr_month.csv")
mean_sfr_value <- readr::read_csv("data/home_value.csv")
interest_rates <- readr::read_csv("data/fed_interest_rates.csv")
mortgage_rate_15_year <- readr::read_csv("data/mortgage_rates_15_year.csv")
mortgage_rate_30_year <- readr::read_csv("data/mortgage_rates_30_year.csv")
ny_median_household_income <- readr::read_csv("data/new_york_median_household_income.csv")
national_median_household_income <- readr::read_csv("data/national_median_household_income.csv")
rental_costs <- readr::read_csv("data/rental_index.csv")
misdemeanor_offenses <- readr::read_csv("data/misdemeanor-offenses-2000-2024.csv")
non_seven_major_felonies <- readr::read_csv("data/non-seven-major-felony-offenses-2000-2024.csv")
major_felonies <- readr::read_csv("data/seven-major-felony-offenses-2000-2024.csv")
```

```{r housing data cleaning}
# remove columns and pivot longer
ny_median_sale_price <- median_sale_price %>% 
  dplyr::filter(RegionName == "New York") %>% 
  dplyr::select(-RegionID, -SizeRank, -RegionType, -StateName, -CountyName, -Metro, -State) %>% 
  tidyr::pivot_longer(cols = -RegionName,
    names_to = "Date",
    values_to = "median_sale_price") %>% 
  dplyr::mutate(
    Date = as.Date(Date, "%Y-%m-%d"), 
    Date = lubridate::floor_date(Date, "month"))

ny_new_construction_sales <- new_construction_sales %>% 
  dplyr::filter(RegionName == "New York, NY") %>% 
  dplyr::select(-RegionID, -SizeRank, -RegionType, -StateName) %>% 
  tidyr::pivot_longer(cols = -RegionName,
    names_to = "Date",
    values_to = "new_construction_sales") %>% 
  dplyr::select(-RegionName) %>% 
  dplyr::mutate(
    Date = as.Date(Date, "%Y-%m-%d"), 
    Date = lubridate::floor_date(Date, "month"))

ny_mean_sfr_value <- mean_sfr_value %>% 
  dplyr::filter(RegionName == "New York, NY") %>% 
  dplyr::select(-RegionID, -SizeRank, -RegionType, -StateName) %>% 
  tidyr::pivot_longer(cols = -RegionName,
    names_to = "Date",
    values_to = "mean_sfr_value") %>% 
  dplyr::select(-RegionName) %>% 
  dplyr::mutate(
    Date = as.Date(Date, "%Y-%m-%d"), 
    Date = lubridate::floor_date(Date, "month"))

rental_costs <- rental_costs %>% 
  dplyr::filter(RegionName == "New York, NY") %>% 
  dplyr::select(-RegionID, -SizeRank, -RegionType, -StateName) %>% 
  tidyr::pivot_longer(cols = -RegionName,
    names_to = "Date",
    values_to = "mean_rental_price") %>% 
  dplyr::mutate(
    Date = as.Date(Date, "%Y-%m-%d"), 
    Date = lubridate::floor_date(Date, "month"))
```


```{r financial data cleaning}
# rename date and variable columns
interest_rates <- interest_rates %>% 
  dplyr::rename(Date = observation_date, Fed_Interest_Rate = FEDFUNDS) %>% 
  dplyr::mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

# adjust date column
mortgage_rate_15_year <- mortgage_rate_15_year %>% 
  dplyr::rename(Date = observation_date, mortgage_rate_15_year = MORTGAGE15US) %>% 
  dplyr::mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

# calculate monthly average interest rates - weekly data was provided
# converted to monthly average for analysis
monthly_avg_15_year <- mortgage_rate_15_year %>% 
  dplyr::mutate(YearMonth = lubridate::floor_date(Date, "month")) %>% 
  dplyr::group_by(YearMonth) %>% 
  dplyr::summarise(monthly_avg_15_year = mean(mortgage_rate_15_year, na.rm = TRUE)) %>% 
  dplyr::mutate(Date = as.Date(format(YearMonth, "%Y-%m-01"), format = "%Y-%m-%d")) %>% 
  dplyr::select(Date, monthly_avg_15_year)

# date debugging - there was a problem in merging data sets, more date formatting was 
# required to fix issues
mortgage_rate_15_year <- mortgage_rate_15_year %>%
  tidyr::complete(Date = seq(min(interest_rates$Date), 
                            max(interest_rates$Date), by = "month")) %>%
  tidyr::fill(everything(), .direction = "down")

# adjust date column
mortgage_rate_30_year <- mortgage_rate_30_year %>% 
  dplyr::rename(Date = observation_date, mortgage_rate_30_year = MORTGAGE30US) %>% 
  dplyr::mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

# calculate monthly average interest rates - weekly data was provided
# converted to monthly average for analysis
monthly_avg_30_year <- mortgage_rate_30_year %>% 
  dplyr::mutate(YearMonth = lubridate::floor_date(Date, "month")) %>% 
  dplyr::group_by(YearMonth) %>% 
  dplyr::summarise(monthly_avg_30_year = mean(mortgage_rate_30_year, na.rm = TRUE)) %>% 
  dplyr::mutate(Date = as.Date(format(YearMonth, "%Y-%m-01"), format = "%Y-%m-%d")) %>% 
  dplyr::select(Date, monthly_avg_30_year)

# date debugging - there was a problem in merging data sets, more date formatting was 
# required to fix issues
mortgage_rate_30_year <- mortgage_rate_30_year %>%
  tidyr::complete(Date = seq(min(interest_rates$Date), 
                            max(interest_rates$Date), by = "month")) %>%
  tidyr::fill(everything(), .direction = "down")

# adjust date column
ny_median_household_income <- ny_median_household_income %>% 
  dplyr::rename(Date = observation_date, ny_median_hh_income = MEHOINUSNYA672N) %>% 
  dplyr::mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

# distribute yearly data down to individual months for analysis purposes
# assign yearly values and grouping
ny_median_household_income_yearly <- ny_median_household_income %>%
  dplyr::mutate(Year = lubridate::year(Date)) %>% 
  dplyr::select(Year, ny_median_hh_income) %>% 
  dplyr::group_by(Year) %>% 
  dplyr::summarise(ny_median_hh_income = dplyr::first(ny_median_hh_income), 
                  .groups = 'drop') 

# adjust to monthly and join financial data back                   
ny_median_household_income_monthly <- tidyr::expand_grid(
  Year = ny_median_household_income_yearly$Year,
  Month = 1:12) %>% 
  dplyr::left_join(ny_median_household_income_yearly, by = "Year") %>% 
  dplyr::mutate(
    Date = as.Date(sprintf("%d-%02d-01", Year, Month)),
    ny_median_hh_income = ny_median_hh_income/12) %>% 
  dplyr::select(Date, ny_median_hh_income) %>% 
  dplyr::arrange(Date)

# adjust date column
national_median_household_income <- national_median_household_income %>% 
  dplyr::rename(Date = observation_date, national_median_hh_income = MEHOINUSA646N) %>% 
  dplyr::mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

# distribute yearly data down to individual months for analysis purposes
# assign yearly values and grouping
national_median_household_income_yearly <- national_median_household_income %>%
  dplyr::mutate(Year = lubridate::year(Date)) %>% 
  dplyr::select(Year, national_median_hh_income) %>% 
  dplyr::group_by(Year) %>% 
  dplyr::summarise(national_median_hh_income = dplyr::first(national_median_hh_income), 
                  .groups = 'drop') 

# adjust to monthly and join financial data back               
national_median_household_income_monthly <- tidyr::expand_grid(
  Year = national_median_household_income_yearly$Year,
  Month = 1:12) %>% 
  dplyr::left_join(national_median_household_income_yearly, by = "Year") %>% 
  dplyr::mutate(
    Date = as.Date(sprintf("%d-%02d-01", Year, Month)),
    national_median_hh_income = national_median_hh_income/12) %>% 
  dplyr::select(Date, national_median_hh_income) %>% 
  dplyr::arrange(Date)
```


```{r crime data cleaning}
# pull totals from each data set
total_misdemeanors <- utils::tail(misdemeanor_offenses, 1)
total_non_seven_felonies <- utils::tail(non_seven_major_felonies, 1)
total_major_felonies <- utils::tail(major_felonies, 1)

# add category identifiers
total_misdemeanors <- total_misdemeanors %>%
  dplyr::mutate(category = "misdemeanor_offenses") %>% 
  tidyr::pivot_longer(
    cols = dplyr::starts_with("20"),
    names_to = "date",
    values_to = "misdemeanor_offenses"
  ) %>% 
  dplyr::select(-OFFENSE, -category)

total_non_seven_felonies <- total_non_seven_felonies %>%
  dplyr::mutate(category = "non_seven_major_felonies") %>%
  tidyr::pivot_longer(
    cols = dplyr::starts_with("20"),
    names_to = "date",
    values_to = "non_seven_major_felonies"
  ) %>% 
  dplyr::select(-OFFENSE, -category)

total_major_felonies <- total_major_felonies %>%
  dplyr::mutate(category = "major_felonies") %>% 
  tidyr::pivot_longer(
    cols = dplyr::starts_with("20"),
    names_to = "date",
    values_to = "major_felonies"
  ) %>% 
  dplyr::select(-OFFENSE, -category)

# join all crime data
total_crime_commissions <- total_misdemeanors %>% 
  dplyr::left_join(total_non_seven_felonies, by = "date") %>% 
  dplyr::left_join(total_major_felonies, by = "date") %>% 
  dplyr::mutate(Date = as.Date(paste0(substr(date, 1, 4), "-01-01")))


total_crime_commissions_yearly <- total_crime_commissions %>%
  dplyr::select(-date) %>% 
  dplyr::mutate(Year = lubridate::year(Date)) %>% 
  dplyr::select(Year, non_seven_major_felonies, major_felonies, misdemeanor_offenses) %>% 
  dplyr::group_by(Year)

# adjust to monthly and join financial data back                   
total_crime_commissions_monthly <- tidyr::expand_grid(
  Year = total_crime_commissions_yearly$Year,
  Month = 1:12) %>% 
  dplyr::left_join(total_crime_commissions_yearly, by = "Year") %>% 
  dplyr::mutate(
    Date = as.Date(sprintf("%d-%02d-01", Year, Month)),
    non_seven_major_felonies = non_seven_major_felonies/12,
    major_felonies = major_felonies/12,
    misdemeanor_offenses = misdemeanor_offenses/12) %>% 
  dplyr::select(Date, non_seven_major_felonies, major_felonies, misdemeanor_offenses) %>% 
  dplyr::arrange(Date)

```


```{r data join}
# join data sets
ny_housing_data <- ny_mean_sfr_value %>% 
  dplyr::left_join(ny_median_sale_price, by = "Date") %>% 
  dplyr::left_join(interest_rates, by = "Date") %>% 
  dplyr::left_join(mortgage_rate_15_year, by = "Date") %>% 
  dplyr::left_join(mortgage_rate_30_year, by = "Date") %>% 
  dplyr::left_join(ny_median_household_income_monthly, by = "Date") %>% 
  dplyr::left_join(national_median_household_income_monthly, by = "Date") %>% 
  dplyr::left_join(total_crime_commissions_monthly, by = "Date")

# Convert Date from character to Date class
ny_housing_data$Date <- as.Date(ny_housing_data$Date)

# get rid of NA values
ny_housing_data_clean <- na.omit(ny_housing_data)

# remove construction data - we have a limited data set to begin with, and we should remove 
# this variable 
ny_housing_data_reduced <- ny_housing_data %>% 
  dplyr::select(-new_construction_sales)

ny_housing_data_reduced <- stats::na.omit(ny_housing_data_reduced)
```


```{r descriptive_analytics}

#qqplot and histogram for residuals
options(scipen=4)
lm.fit <- lm(median_sale_price ~ Date + new_construction_sales + mean_sfr_value + Fed_Interest_Rate + mortgage_rate_15_year + mortgage_rate_30_year + ny_median_hh_income + national_median_hh_income, 
             data = ny_housing_data_clean)
par(mar=c(4,4,2,2))
plot(lm.fit, which = 2)
hist(lm.fit$residuals)

#heteroskedasticity check
plot(lm.fit$residuals ~ lm.fit$fitted.values, main = "Heteroskedastic Residuals", xlab = "Predicted Values", ylab = "Residuals")
abline(h=0, col="red")

#residuals vs fitted plot
plot(lm.fit, which = 1)

#checking for serial correlation
dwtest(lm.fit)

```


```{r reduced model eda}
# plot a reduced lm model
reduced_lm_model <- stats::lm(median_sale_price ~ ., data = ny_housing_data_reduced)
plot(reduced_lm_model, which = 2)
hist(reduced_lm_model$residuals)

#heteroskedasticity check
plot(reduced_lm_model$residuals ~ reduced_lm_model$fitted.values, 
      main = "Heteroskedastic Residuals", 
      xlab = "Predicted Values", 
      ylab = "Residuals")
abline(h=0, col="red")

#residuals vs fitted plot
plot(reduced_lm_model, which = 1)

#checking for serial correlation
dwtest(reduced_lm_model)
```

## Descriptive Analytics 
We can see from the qqplot that the data deviates from the qqline. It is somewhat following the line from about -0.8 to 1, but deviates at each end. At the lowest and upper ends of the Standardized residuals, the deviation becomes more apparent. Looking at the histogram, it seems that it skews to the right slightly. Based on these two plots, I would conclude that the residuals are not normally distributed.

The "Heteroskedastic Residuals" plot clearly shows heteroskedasticity is present in our data. When plotting Residuals vs Fitted, it clearly is not homoskedastic, and the wave indicates a cyclical pattern, which makes sense since we have time series data.

Now, it seems clear that our OLS assumptions do not hold, and we have a problem with heteroskedasticity -- most likely related to the fact that we have time series data. We must check for serial correlation. We use the Durbin Watson test here, and find that the DW statistic is 0.99041 and the p value is very small. We have positive correlation here; while it is not extreme, it is still concerning and must be corrected.

## Define an initial set of predictors

Our initial set of predictors will include: Date, end of the month for every month from 2018 to November 2024; Median Sale Price, New Construction Sales, and Mean SFR value (Single Family Residence), Mortgage Rates for 15 years and 30 years, the Federal Interest Rate, NY Median Household Income, and lastly, National Median Household Income. We will focus on building our model using data from the New York, New York region.

## OLS or Logistic Regression

Since we have concluded that our data suffers from serial correlation, we must transform our variables and lag the data. Therefore, we will use logistic regression to build our model.

```{r lagging to correct for serial correlation}

#create lagged variables

ny_housing_data_clean <- ny_housing_data_clean %>%
  arrange(Date) %>%
  mutate(
    Date.L6 = Date %m+% months(-6),  # Lag by 6 months
    Date.L12 = Date %m+% months(-12) # Lag by 12 months
  )

#regression with lagged variables
fit.lag <- lm(median_sale_price ~ Date + Date.L6 + Date.L12 + new_construction_sales + mean_sfr_value, data = ny_housing_data_clean)

summary(fit.lag)

```


```{r reduced model lagging}
ny_housing_data_reduced <- ny_housing_data_reduced %>%
  dplyr::arrange(Date) %>%
  dplyr::mutate(
    Date.L6 = Date %m+% months(-6),  # Lag by 6 months
    Date.L12 = Date %m+% months(-12) # Lag by 12 months
  )

#regression with lagged variables
reduced_lm_model_lag <- stats::lm(median_sale_price ~ ., data = ny_housing_data_reduced)

summary(reduced_lm_model_lag)

```

```{r reduced WLS model}
# calculate WLS model weights
reduced_lm_model_wls_weights <- 1 / stats::fitted(stats::lm(abs(stats::residuals(reduced_lm_model_lag)) ~ stats::fitted(reduced_lm_model_lag)))^2

# fit a WLS model
reduced_wls_model <- stats::lm(median_sale_price ~., data = ny_housing_data_reduced,
                              weights = reduced_lm_model_wls_weights)

summary(reduced_wls_model)

```

```{r reduced stepwise model}
# fit a null model
reduced_lm_model_null <- stats::lm(median_sale_price ~ 1, data = ny_housing_data_reduced)

# run a stepwise regression
reduced_lm_model_step <- stats::step(reduced_lm_model_null, direction = "both", 
                                    scope = stats::formula(reduced_lm_model_lag))

# based on the stepwise regression, we should use the formula
# median_sale_price ~ mean_sfr_value + ny_median_hh_income + mortgage_rate_15_year
# however I think we need to include the mortgage_rate_30_year as well
```

## Transformation in Preparation for a Regression

It seems that lagging by 6 months is not significant, but a 12 month lag (1 year) is significant. We should check if the serial correlation problem is corrected.

```{r check for serial correlation correction}

plot(ny_housing_data_clean$Date[13:nrow(ny_housing_data_clean)],
     fit.lag$residuals[13:length(fit.lag$residuals)],
     xlab = "Date",
     ylab = "Residuals")
abline(0,0, col="red")

dwtest(fit.lag)
```

## Data Preparation

From preliminary inspection of the plot, it does not seem that the serial correlation problem has been resolved. Instead, it seems to have worsened. The DW test also still confirms that we have positive serial correlation.

## Modeling

```{r pcr modeling}
pcr_model <- pls::pcr(median_sale_price ~ ., data = ny_housing_data_reduced, 
                      scale = TRUE, validation = "CV")
summary(pcr_model)
pls::validationplot(pcr_model)
```

```{r bootstrap model}


```

## Analysis

## Conclusion